// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// lodestone-css-selectors/meta.json
// lodestone-css-selectors/profile/achievements.json
// lodestone-css-selectors/profile/attributes.json
// lodestone-css-selectors/profile/character.json
// lodestone-css-selectors/profile/classjob.json
// lodestone-css-selectors/profile/gearset.json
// lodestone-css-selectors/profile/minion.json
// lodestone-css-selectors/profile/mount.json
package pack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xcd\x4a\x03\x31\x1c\x04\xf0\x7b\xa1\xef\x30\xe4\xb4\x0b\x25\x1f\xb6\xb1\xa0\xa7\xa2\x45\xa1\x2e\x16\x6a\xd5\x5b\x49\xb7\x7f\x6b\xd8\x90\x2c\xd9\xd4\xc3\x8a\x6f\xe3\x9b\xf8\x62\x12\x56\x3c\xf5\x3c\x3f\x86\x99\xcf\xf1\x08\x00\xd8\x07\xc5\xce\x06\xcf\xae\xc0\x24\xd7\x5c\xb2\xc9\x5f\x70\xea\x28\x2e\x8e\xe4\xd3\x2d\x75\x4d\x0a\x6d\x16\xf5\x29\x3a\x31\xe7\xf3\xe9\x39\x57\x85\xbd\x75\x94\x59\x15\x7a\xeb\x9c\x11\x9a\x4b\x14\x76\xfd\x1e\x3c\x5d\xe3\x66\xbd\xc5\xe3\x06\x4a\xee\x94\xde\x69\x14\xcb\x78\xfc\xf9\xf6\x3d\xf9\x03\x75\xd8\xb6\x07\x93\xa8\x84\xb3\x0d\xa1\x32\x75\x96\xaf\x25\x16\x6d\xeb\xe8\x85\xf6\x2b\x9b\xc4\xa5\xd4\x5c\x71\xa5\x51\xac\xee\x9f\xaa\x87\xc9\x60\xef\xa8\x6e\x42\x89\xe7\xe1\x85\x50\x17\xd9\x60\x98\x22\xd4\x6c\x39\x95\x33\x6c\xcc\x9b\x89\xf6\xbf\x80\x8d\x47\x5f\xbf\x01\x00\x00\xff\xff\xf9\x54\xf8\x4d\xfe\x00\x00\x00")

func metaJsonBytes() ([]byte, error) {
	return bindataRead(
		_metaJson,
		"meta.json",
	)
}

func metaJson() (*asset, error) {
	bytes, err := metaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.json", size: 254, mode: os.FileMode(438), modTime: time.Unix(1608501145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileAchievementsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x50\x50\xf2\xf1\x0c\x0e\x51\xb2\x52\x50\xd2\xcb\x49\x29\x2e\x89\x8f\x4f\x4c\xce\xc8\x4c\x2d\x4b\xcd\x4d\xcd\x2b\x51\xb0\x53\x28\xcd\xb1\xca\x2b\xc9\xd0\x4d\xce\xc8\xcc\x49\xd1\x30\xd6\x54\xd2\x81\x6a\xf2\x74\x01\x6b\x49\xcd\x2b\x29\xaa\x44\xd1\x03\x57\x01\x32\x36\xde\xcf\x35\x22\x24\xde\x29\x34\x24\xc4\xdf\x0f\xa4\xbe\x34\x47\x2f\xa9\x24\x2f\x3e\xbe\x20\x31\x3d\xb5\x08\xc9\x60\x23\x4d\x05\x3b\x85\x9c\x4c\x24\x11\x13\x90\x48\x22\x92\x80\xa1\xa6\x12\x2f\x57\x2d\x20\x00\x00\xff\xff\x6d\x82\xdf\x3c\xb4\x00\x00\x00")

func profileAchievementsJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileAchievementsJson,
		"profile/achievements.json",
	)
}

func profileAchievementsJson() (*asset, error) {
	bytes, err := profileAchievementsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/achievements.json", size: 180, mode: os.FileMode(438), modTime: time.Unix(1608435847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileAttributesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd5\x4d\x4b\xf3\x40\x10\x07\xf0\x7b\xa1\xdf\x61\xc9\xe9\x79\x40\xc5\xd6\x2a\xd2\x43\x61\xd9\x8e\xc9\xd0\xed\x76\xd9\x0c\xbe\x9c\x96\xb4\x29\x34\x10\x6b\x49\xa3\x20\xe2\x77\x17\xb5\x88\xa6\x24\x4d\xca\xe6\x3a\x90\xfc\xf2\x9f\xcc\xec\xbe\x75\x3b\x8c\x31\xe6\x85\x64\x40\xf9\x14\x78\x43\xe6\xe5\xd1\x3c\x5d\x9e\x2d\x56\x51\x16\x2d\xf2\x65\x66\xed\x26\xca\xa2\x47\x6b\xd3\x64\x9b\x0f\xd7\xf9\xea\x74\xb1\x4a\xd2\xf8\x5f\xff\x3f\x1b\xb1\x7c\xfe\x14\xbf\xfe\x2a\xf6\xbe\x8a\xd9\x5e\x25\xfe\xf3\xa0\x77\xb2\x63\xc7\x70\x4f\x60\x90\x1e\xdc\xbb\xfd\x2a\xf7\x16\x89\xcb\x56\xd8\x8b\x2a\x16\x15\x81\x94\xe8\x83\x12\xe0\x9e\x1e\x54\xd1\x53\x54\x63\xf7\xe4\x65\x09\xb9\x43\x85\x41\x42\xc1\xa5\x0d\x90\xac\xe1\xd4\x24\xf4\xc0\xc9\x78\x11\x98\x29\x2a\x4e\x38\x53\xee\xed\xca\x11\x1b\xa3\x01\x41\x2d\x26\x2f\x9b\xb4\x9f\xec\x37\xa0\xc2\x26\xee\x95\x83\x8e\x4f\xb9\x8f\xc2\xb6\x66\x97\x75\x7c\xa7\x73\x22\x2e\x26\x56\xcf\xee\xc0\x34\xc0\xaf\x1d\x04\x0f\x27\x28\xa5\x0d\x35\x40\x93\x35\xab\x29\xd7\x8b\xfd\xdd\x7b\x3d\x23\x50\xa2\xc9\xc9\xd6\x3b\x77\x90\x3f\x00\x2e\x51\xf9\xad\x7f\x44\xe5\xce\x85\x1a\x8e\xf8\x09\x75\xe9\x03\x0b\x47\xa0\xb8\x68\x76\xa7\xf4\x5c\xdc\xa1\x1a\xa1\x15\xf4\xc0\xd0\x05\xfa\xd3\xdc\xe3\xd8\x88\x3d\xa7\xc5\xf7\xa6\x49\xb1\x12\x27\x2f\xc5\xd2\x76\x13\xad\x4b\x0e\x15\x6d\x7d\x6d\xc5\xb1\x60\xbf\x36\xd8\xed\xbc\x7f\x04\x00\x00\xff\xff\xc8\xae\x94\xe4\x11\x09\x00\x00")

func profileAttributesJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileAttributesJson,
		"profile/attributes.json",
	)
}

func profileAttributesJson() (*asset, error) {
	bytes, err := profileAttributesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/attributes.json", size: 2321, mode: os.FileMode(438), modTime: time.Unix(1608435847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileCharacterJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5d\x6b\xdb\x30\x14\x86\xef\x0b\xfd\x0f\xc2\x57\x2b\xac\x83\x7e\x5c\xe5\x22\xa0\xda\x5a\xf0\xb0\x2d\xa3\x68\x1e\xb9\x3a\x28\xb2\x52\x6b\xf3\x87\xb0\xd5\x6c\x63\xe4\xbf\x8f\xd8\x8d\x1b\x9b\x34\x4d\x58\xd9\x5d\x48\x74\x9e\xf7\x8d\xce\x63\xff\xb9\xbc\x40\x08\x21\x07\xbb\xdc\x4f\x08\xb8\x01\x9e\xcf\xbf\xd0\x07\x67\x82\x9c\x4f\x32\x13\xb5\x90\x56\xd5\x00\x32\x17\x4d\x03\x5a\x56\x25\x9a\x22\x5d\x3c\x4e\x4a\x9b\x5d\xcb\x4c\xe7\xe9\x87\x9b\x2b\xe7\xe3\x61\x08\x04\x24\x21\xc1\x61\x14\xa4\xc2\x0a\x34\x45\xe6\x15\x52\x82\x39\x66\xed\xe8\xaa\x16\x85\x02\x68\x09\x00\x2b\x21\xd5\xb1\x0a\x0f\x3e\x1d\x07\x36\x2a\x5f\xe9\xd2\xd6\x55\xfa\x24\xad\xae\xca\xfe\xec\x67\x46\x08\xb8\x34\x8c\x71\xb4\x70\x26\xe8\xf9\x2a\xda\x9f\x22\x1c\x92\x31\x67\x55\x2b\x25\xab\xc2\x88\xf2\x37\x40\x29\x8a\x6d\x8f\xec\x7e\xaf\xc6\xed\x15\x9a\x22\x71\xb0\x57\x0b\xf5\x5d\x1a\x41\x80\x17\x84\xcd\x87\x71\x5d\x73\xca\x39\x0d\xb7\xa1\xa9\x5e\xbf\x9a\x2b\x6b\xd5\x58\x34\x45\xa9\x5e\x1f\xb9\x86\x1e\x1a\xfa\x9e\x17\x90\x77\x86\x72\x1a\xff\x23\xf1\x05\xb8\xe9\x3e\x6e\x76\x3b\x99\x31\x1c\x79\x7b\x4b\x19\xa6\x5c\x2f\xf3\x4a\xfe\xd8\x63\xdd\x5f\x75\x21\xe3\x2d\x98\xc1\x17\xfd\xc6\x67\x5f\x31\xf3\x7c\x1c\x81\x47\x7c\xde\xe2\xcd\x18\xde\xad\x76\x10\xd1\x8f\xef\xac\xd8\x76\x1a\x6a\xb9\xac\x7e\x8d\x2b\x8c\x4e\x6c\xa9\x03\x90\x87\x17\x43\xc3\x76\xf9\x4b\x5d\xdb\xac\x3f\x1a\x53\xc6\x19\xf6\x79\x7b\xf6\x7b\x03\xa0\x0b\xf1\xa8\xc0\x54\xe6\xc9\x1c\x7b\x10\xe2\x24\x06\x4e\x70\x78\x82\xd8\x66\x6d\xac\x12\xc5\x7f\x95\xba\xcf\x6c\x4d\x79\xfe\x57\xef\xe0\xf5\x39\xdc\xdb\x53\xd5\x3e\x07\x7a\x77\xcc\x6e\x86\xdd\xf6\xf5\x18\xc1\x8c\x44\x1e\x61\x6f\x0b\x7e\x73\x9e\xe0\x73\xc2\x92\x0e\x6b\x46\xfe\xfd\xac\xea\x3c\x1d\xf6\xdc\x0d\x71\x9f\x77\x77\x39\x1a\xb1\xda\xe6\x2f\xce\x72\xfa\x2d\x7a\xbb\xef\xdd\x69\x7d\x2f\x2f\x36\x7f\x03\x00\x00\xff\xff\x8e\xf3\xf9\xa6\x7a\x06\x00\x00")

func profileCharacterJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileCharacterJson,
		"profile/character.json",
	)
}

func profileCharacterJson() (*asset, error) {
	bytes, err := profileCharacterJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/character.json", size: 1658, mode: os.FileMode(438), modTime: time.Unix(1608500969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileClassjobJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x9a\xdf\x6b\xdb\x30\x10\xc7\xdf\x0b\xfd\x1f\x8c\x9f\x56\xd8\x06\x6b\xb3\x5f\x7d\x18\x28\x8e\x16\x6b\x96\xa5\x22\xdb\xed\xd8\x4b\xe8\xd2\x8e\x7a\x98\x16\xba\xb4\x0c\x46\xff\xf7\xb1\x2e\x63\x8d\x7d\x76\x2c\xf9\x74\xce\x63\x4d\x75\xdf\xaf\xf5\x91\x74\xa7\x8b\x7f\xed\xef\x05\x41\x10\x84\x53\xfd\xe5\x13\x0b\x8f\x83\xf5\xdf\x8f\xcf\x24\x3f\xe5\x32\x3c\x0e\xc2\x8b\xf2\xfe\xe5\xf2\xea\xfc\xf6\x7c\xb9\xba\xbc\x5d\x2c\xbe\xdf\x7c\x5d\x2c\xaa\xf2\xc7\xea\xf8\x7a\x75\xf5\x62\x79\x55\x56\x17\xcf\xde\x1e\x04\x1f\x82\x8b\xf2\xfe\xc9\xa3\xc3\x83\xf0\xf9\x93\x68\x29\xcf\x73\xc9\xdd\xc3\x4d\x36\xc3\x29\x96\x0e\x08\x76\x74\x10\xfe\x8d\xf5\xb0\x8e\x19\xf2\xc2\xf0\xa4\x3e\x03\xfc\xf3\x49\x4f\x8d\xf7\x5b\x0d\xdb\xcc\x26\x10\xed\xd0\xf9\xf5\x81\x60\x1b\xaf\xbf\x9e\x80\x13\x26\xd9\x4c\xa8\xb6\x35\xf0\x54\x65\x79\x73\xbd\xba\xbc\x5e\x01\x1e\x1b\x8f\x5e\xfd\x79\x74\x57\xd5\xff\xa9\x2a\xeb\xff\xd3\xf9\xb6\x85\x92\x3a\x4a\xb2\x9c\xe5\x9c\xde\xcb\xd1\xa6\x97\xf5\x9a\xa0\xf5\x30\x69\xac\xd7\x33\x66\x8c\xd0\x66\x04\x5c\xc0\xb0\xd1\x70\x01\xc3\xc8\x71\x01\xc3\x9a\xb8\x66\xcc\x24\x89\x12\xf3\x38\x1f\x81\xd8\xd1\x0e\x11\x03\xbc\x90\x13\x03\x3c\x34\x89\xcd\x0b\x35\x35\x9c\x25\x7c\x8c\x3d\x36\xd9\x21\x62\x80\x17\x72\x62\x80\x87\x09\x90\xc3\x52\xad\x12\x64\x5a\x87\x3b\x94\xc0\x1c\xbd\xa0\xd2\x72\xf4\x00\x9c\x88\x86\xcd\xb5\xc6\xae\x37\xfa\xd8\xa3\x4a\x60\x8e\x5e\xc8\x71\xf5\x4a\x60\x4a\xa8\xf6\x0b\x82\x47\x73\x54\xb9\xcb\xd1\x0b\x39\xac\x5e\xb9\x2b\x63\x69\x61\x98\x18\x01\x17\x55\xe2\x72\xf4\x42\x8e\xab\x67\xe2\x3a\x8b\x45\xce\x53\x36\xe7\x9d\x57\xf0\xea\xf2\xfc\xf6\x5b\xf9\xb3\x7b\x35\x78\xb9\x71\x79\x97\x87\xc1\x78\x97\x05\xb6\x4e\x14\x6b\xc9\x5a\x6b\x3e\x5c\x47\xd6\x99\xc8\xbb\x3c\x05\x87\x5e\xf9\x86\x65\xb9\xd1\x52\xcf\x05\x6b\x2d\x11\x70\x5d\x59\x27\x1a\xef\xf2\x14\x2c\xfa\xa4\x93\x7f\x2d\x42\x66\x66\xc3\x51\x78\xa9\xa7\xbd\xcb\x0f\x45\x81\x56\x35\xa7\x2c\x8a\x85\x12\x59\x6b\x1b\x01\xd7\x93\xc7\x03\x0a\xb5\x3a\xf6\x2e\x0b\x75\x74\x54\xd4\xde\x1b\xc0\x35\xe4\xf1\x6c\x42\xad\x7b\xbd\xcb\x42\xb5\xd3\x54\xb2\x28\xe9\xaa\x9d\xee\xaa\x5a\x8b\xbc\x5e\x9f\x0d\x3b\x7c\x06\x87\x87\xe7\x72\x70\x58\xa0\xb6\x29\xd2\x54\xab\xf6\x45\x6b\x27\x69\x7d\x36\x0c\x0e\x8f\x31\x51\xbd\xf6\xb6\xe1\x33\xbc\x05\x65\xbd\x79\xb1\xc3\x3b\xcd\x13\x1c\xb6\x36\x4f\x53\x59\x74\xde\x5a\xec\x24\xad\xef\x8e\xd8\xe1\x9d\x26\x0a\x0e\xdb\x38\xa5\x22\x66\x4e\xb8\xca\xad\x33\xc6\xeb\x71\x6f\x78\x78\xf2\x56\x19\x03\x4f\xb6\xb9\xb9\x1f\xf3\x45\x96\x8a\x3c\xa6\x41\x81\x55\x43\xe1\xc9\x53\xa0\xe8\x77\xc9\x33\xa9\x36\x54\x5b\x02\xab\x88\xc2\x93\xa7\xe0\xd0\xef\xb7\x2e\x2d\x67\x84\x3b\xc2\xfa\xa0\xf7\x2e\x4f\x41\x62\x5b\x2b\x70\x3d\xe3\x2c\x8f\xb9\x39\xd3\xa6\xe3\x87\x47\x5c\x5f\xc0\x30\x4a\x1a\xc0\x30\x0a\x1a\xc0\x30\xe0\x23\x0b\xce\x4e\xa9\x30\xbc\x19\x17\x03\x20\x4f\x81\x01\x90\x05\xd2\x84\x8c\x62\x9e\xda\x37\x3d\x1c\x3d\x6d\xff\x96\xcd\x2b\x09\xf8\x73\x35\xef\x24\xe0\x4f\xee\x6a\x24\xa2\x42\x0a\xc5\x8c\x7d\x53\xd6\xd1\xd4\xbb\x71\x51\x00\xf2\x14\x28\x00\x59\xf0\x6b\x07\xd1\x71\x97\xef\xef\x88\xb2\x23\x8b\x27\x3f\x94\x03\x5a\x47\x76\xaa\x73\xe6\xd0\x90\x75\xb4\xe4\xf1\x32\x41\xd1\x90\xc5\x93\x6d\x82\xf8\x28\xb2\x98\x6a\x3f\x78\xbc\x4b\x50\x34\x64\xf1\x64\xff\x63\xd8\xdf\x7b\xf8\x1d\x00\x00\xff\xff\x8f\x26\x1f\xb9\x4d\x2e\x00\x00")

func profileClassjobJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileClassjobJson,
		"profile/classjob.json",
	)
}

func profileClassjobJson() (*asset, error) {
	bytes, err := profileClassjobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/classjob.json", size: 11853, mode: os.FileMode(438), modTime: time.Unix(1608488585, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileGearsetJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\xdc\xc1\x6b\x1a\x41\x14\xc7\xf1\x7b\x20\xff\xc3\xe2\xa9\x85\x18\xaa\xc6\xda\x7a\x08\x4c\x74\x6a\x96\x6c\xd6\xb2\xbb\x25\xe4\x24\xad\x1e\x14\x24\xe6\x60\x7b\x29\xf9\xdf\xcb\xa6\x1e\x62\xd1\x8e\xf3\xdb\x37\xbf\x7d\x7b\x2a\x0c\x82\xdf\x79\x0d\x7e\xd8\xc3\xbe\xdf\xe7\x67\x51\x14\x45\xad\x07\x6b\xbe\x4e\xd3\xd6\x30\xda\x1d\xbc\x1e\xa6\xe6\xde\xb6\x86\x51\xeb\x72\x35\xdf\x3c\xb5\xe7\xed\xf6\x87\xe8\x3a\xba\x5c\xfc\x68\x6f\x37\x9b\xf5\x76\xf5\x1c\x5d\x47\x8b\xd5\xaf\xe1\xd3\x76\xd9\x9e\x2f\x57\xeb\xc5\xbb\xce\x7b\xb9\xa3\x6e\x79\xb4\xec\xee\x9d\xb4\x2e\xde\xd4\x8d\x6f\x66\x49\x9c\xde\x05\x08\x7c\xfd\xea\xef\x7b\x9f\xd9\xfb\xe6\xfb\x38\x33\x13\x3b\xab\x7f\x3c\xfb\x47\xbd\xf2\xe8\xf9\xf8\xc0\x76\xd9\xe1\xe6\x26\x59\xfe\xff\xff\x81\xbc\x30\x71\x5a\xdb\x0d\x0e\x1e\xed\x8f\xda\x14\x36\x8b\xcd\xac\x13\xa0\xb1\x5f\x1e\xfd\x5c\xbf\x39\x19\x94\x27\xeb\x95\x6b\xec\x07\x0b\xbb\x35\x15\x1e\xf8\x2b\x38\x52\xd8\xab\xa9\xb0\x77\x72\xe1\x55\x4d\x85\x57\x27\x17\xf6\x6b\x2a\xec\x3b\x0b\x47\x99\x35\xc5\x34\x0b\xf5\x63\x3a\x38\xf2\xa9\x7f\x7e\x5b\xfe\x06\xbd\x5c\x9c\x9f\xed\x3c\xcc\x6f\x63\x9b\x8c\x5d\x1e\x76\xb4\x7b\x28\x13\x88\x7a\x48\x1f\x8f\x98\x87\xfa\xca\x7d\x3d\x64\xde\x00\xf5\x50\xa6\x31\xa4\x87\xbc\x42\xd4\x43\x5e\x21\xea\x21\xaf\x10\xf5\x90\x57\x58\xc1\x43\x99\x48\xd4\xc3\x5b\x6b\x9c\x1a\x76\xb5\x6b\x28\x13\x88\x6a\x48\x1f\x8f\x98\x86\xfa\xca\x7d\x35\x64\xde\x00\xd5\x50\xa6\x31\xa4\x86\xbc\x42\x54\x43\x5e\x21\xaa\x21\xaf\x10\xd5\x90\x57\x58\x41\x43\x99\x48\x54\xc3\x9b\xe9\xf8\xd1\xa5\x61\x4f\xbb\x86\x32\x81\xa8\x86\xf4\xf1\x88\x69\xa8\xaf\xdc\x57\x43\xe6\x0d\x50\x0d\x65\x1a\x43\x6a\xc8\x2b\x44\x35\xe4\x15\xa2\x1a\xf2\x0a\x51\x0d\x79\x85\x15\x34\x94\x89\x84\x9f\x0d\x4d\x3a\xce\x5d\x1c\x5e\x69\xe7\x50\x26\x10\xe5\x90\x3e\x1e\x31\x0e\xf5\x95\xfb\x72\xc8\xbc\x01\xca\xa1\x4c\x63\x48\x0e\x79\x85\x28\x87\xbc\x42\x94\x43\x5e\x21\xca\x21\xaf\xb0\x02\x87\x32\x91\x28\x87\x0f\x26\xce\x0b\x17\x87\x7d\xed\x1c\xca\x04\xa2\x1c\xd2\xc7\x23\xc6\xa1\xbe\x72\x5f\x0e\x99\x37\x40\x39\x94\x69\x0c\xc9\x21\xaf\x10\xe5\x90\x57\x88\x72\xc8\x2b\x44\x39\xe4\x15\x56\xe0\x50\x26\x12\xe5\x30\xb1\x13\xe7\xc3\xe1\x47\xed\x1a\xca\x04\xa2\x1a\xd2\xc7\x23\xa6\xa1\xbe\x72\x5f\x0d\x99\x37\x40\x35\x94\x69\x0c\xa9\x21\xaf\x10\xd5\x90\x57\x88\x6a\xc8\x2b\x44\x35\xe4\x15\x56\xd0\x50\x26\x12\xd5\xf0\x8b\xb5\xce\x67\xc3\x81\x76\x0d\x65\x02\x51\x0d\xe9\xe3\x11\xd3\x50\x5f\xb9\xaf\x86\xcc\x1b\xa0\x1a\xca\x34\x86\xd4\x90\x57\x88\x6a\xc8\x2b\x44\x35\xe4\x15\xa2\x1a\xf2\x0a\x2b\x68\x28\x13\xe9\xad\x61\xf9\xef\x4e\x44\x6b\xb2\x2c\x4e\xdd\xcf\x88\x9f\xb4\xab\x28\x13\x88\xaa\x48\x1f\x8f\x98\x8a\xfa\xca\x7d\x55\x64\xde\x00\x55\x51\xa6\x31\xa4\x8a\xbc\x42\x54\x45\x5e\x21\xaa\x22\xaf\x10\x55\x91\x57\x58\x41\x45\x99\x48\xf4\x19\x31\xb5\xa3\xbb\xc4\x8c\xac\x4b\xc4\xcf\xda\x45\x94\x09\x44\x45\xa4\x8f\x47\x4c\x44\x7d\xe5\xbe\x22\x32\x6f\x80\x8a\x28\xd3\x18\x52\x44\x5e\x21\x2a\x22\xaf\x10\x15\x91\x57\x88\x8a\xc8\x2b\xac\x20\xa2\x4c\x24\xfc\xbe\x45\x66\x46\x36\xb1\x85\xf3\x21\xb1\xa3\x7e\x43\x8d\x50\x21\xfc\x4a\xbe\xbe\x4d\x2f\x27\xbf\x93\xaf\x2f\xdd\xfb\xa5\xfc\x26\x6c\xa9\x11\x8a\x0c\xfa\x5a\xbe\xfe\x3d\x35\xc4\x44\xf8\xc5\x7c\xfd\x9b\x6a\x88\x89\x55\x5e\xcd\xaf\x77\x57\x4d\x16\xa7\x93\x8e\x53\x46\xfd\xbb\x6a\x6a\x5e\x56\xa3\x6f\xe7\xcb\xc9\x32\xea\x4b\xf7\x96\xb1\x11\xfb\x6a\x1a\xb0\xb0\xa6\x01\x1b\x6b\x1a\xb0\xb2\xa6\x01\x3b\x6b\x9a\xb1\xb4\xa6\xde\xad\x35\xa5\x8c\x5d\xa7\x8c\xea\xf7\xd6\x08\x15\xc2\x32\xea\xdb\xff\x72\xb2\x8c\xfa\xd2\xbd\x65\x6c\xc2\xee\x1a\xa1\xc8\xa0\x32\xea\xdf\x5e\x43\x4c\x84\x65\xd4\xbf\xbf\x86\x98\x58\x45\xc6\x7a\x37\xd8\xe4\xd3\x6f\xc9\x28\x7b\xcc\x0b\x93\x38\x7d\xec\x1d\xfe\x59\x23\x23\xb9\xbb\xc2\xf9\xd9\xcb\x9f\x00\x00\x00\xff\xff\xa0\x60\x71\xbb\xb4\x5c\x00\x00")

func profileGearsetJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileGearsetJson,
		"profile/gearset.json",
	)
}

func profileGearsetJson() (*asset, error) {
	bytes, err := profileGearsetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/gearset.json", size: 23732, mode: os.FileMode(438), modTime: time.Unix(1608484340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileMinionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x50\x50\xf2\xf1\x0c\x0e\x51\xb2\x52\x50\xd2\xcb\xcd\xcc\xcb\xcc\xcf\x8b\x8f\xcf\xc9\x2c\x2e\x51\xd2\x81\xca\xfa\x39\xfa\xba\xa2\xc8\xe6\x25\xe6\xa6\x2a\xf1\x72\xd5\x02\x02\x00\x00\xff\xff\xeb\xdc\x01\x4f\x3f\x00\x00\x00")

func profileMinionJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileMinionJson,
		"profile/minion.json",
	)
}

func profileMinionJson() (*asset, error) {
	bytes, err := profileMinionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/minion.json", size: 63, mode: os.FileMode(438), modTime: time.Unix(1608435847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileMountJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x50\x50\xf2\xf1\x0c\x0e\x51\xb2\x52\x50\xd2\xcb\xcd\x2f\xcd\x2b\x89\x8f\xcf\xc9\x2c\x2e\x51\xd2\x81\x4a\xfa\x39\xfa\xba\x22\x4b\xe6\x25\xe6\xa6\x2a\xf1\x72\xd5\x02\x02\x00\x00\xff\xff\xf1\xf9\x11\x1d\x3d\x00\x00\x00")

func profileMountJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileMountJson,
		"profile/mount.json",
	)
}

func profileMountJson() (*asset, error) {
	bytes, err := profileMountJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/mount.json", size: 61, mode: os.FileMode(438), modTime: time.Unix(1608435847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.json":                 metaJson,
	"profile/achievements.json": profileAchievementsJson,
	"profile/attributes.json":   profileAttributesJson,
	"profile/character.json":    profileCharacterJson,
	"profile/classjob.json":     profileClassjobJson,
	"profile/gearset.json":      profileGearsetJson,
	"profile/minion.json":       profileMinionJson,
	"profile/mount.json":        profileMountJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.json": &bintree{metaJson, map[string]*bintree{}},
	"profile": &bintree{nil, map[string]*bintree{
		"achievements.json": &bintree{profileAchievementsJson, map[string]*bintree{}},
		"attributes.json":   &bintree{profileAttributesJson, map[string]*bintree{}},
		"character.json":    &bintree{profileCharacterJson, map[string]*bintree{}},
		"classjob.json":     &bintree{profileClassjobJson, map[string]*bintree{}},
		"gearset.json":      &bintree{profileGearsetJson, map[string]*bintree{}},
		"minion.json":       &bintree{profileMinionJson, map[string]*bintree{}},
		"mount.json":        &bintree{profileMountJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
