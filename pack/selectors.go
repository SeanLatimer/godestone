// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// lodestone-css-selectors/meta.json
// lodestone-css-selectors/profile/achievements.json
// lodestone-css-selectors/profile/attributes.json
// lodestone-css-selectors/profile/character.json
// lodestone-css-selectors/profile/classjob.json
// lodestone-css-selectors/profile/gearset.json
// lodestone-css-selectors/profile/minion.json
// lodestone-css-selectors/profile/mount.json
// lodestone-css-selectors/search/character.json
package pack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\xcd\x4a\x03\x31\x1c\x04\xf0\x7b\xa1\xef\x30\xe4\xb4\x0b\x25\x1f\xdb\xc6\x82\x9e\x8a\x16\x85\xba\x58\xa8\x55\x6f\x25\xdd\xfe\xad\x61\x43\xb2\x64\x53\x0f\x15\xdf\xc6\x37\xf1\xc5\x24\xac\x78\xf1\x3c\x3f\x86\x99\x8f\xf1\x08\x00\xd8\x3b\xc5\xde\x06\xcf\x2e\xc1\x24\xaf\x2a\xae\xd8\xe4\x37\x39\xf5\x14\x17\x47\xf2\xe9\x86\xfa\x36\x85\x2e\x93\xe6\x14\x9d\x98\xf3\xf9\x94\xcb\xff\xae\x0e\x7b\xeb\x28\xb3\x3a\x9c\xad\x73\x46\x68\x2e\x51\xd8\xf5\x5b\xf0\x74\x85\xeb\xf5\x16\x0f\x1b\x28\xb9\x53\x7a\xa7\x51\x2c\xe3\xf1\xfb\xcb\x9f\xc9\x1f\xa8\xc7\xb6\x3b\x98\x44\x25\x9c\x6d\x09\xb5\x69\xb2\x7c\x29\xb1\xe8\x3a\x47\xcf\xb4\x5f\xd9\x24\x2e\xa4\xe6\x8a\x2b\x8d\x62\x75\xf7\x58\xdf\x4f\x06\x7b\x4b\x4d\x1b\x4a\x3c\x0d\x37\x84\xaa\xb2\xc1\x30\x45\xa8\xd9\x72\x2a\x67\xd8\x98\x57\x13\xed\x5f\x01\x1b\x8f\x3e\x7f\x02\x00\x00\xff\xff\x82\xc6\x07\xfe\xff\x00\x00\x00")

func metaJsonBytes() ([]byte, error) {
	return bindataRead(
		_metaJson,
		"meta.json",
	)
}

func metaJson() (*asset, error) {
	bytes, err := metaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.json", size: 255, mode: os.FileMode(438), modTime: time.Unix(1608594699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileAchievementsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5f\x4b\xf3\x30\x14\xc6\xef\x07\xfb\x0e\x87\x5c\xad\x63\xef\xc2\xab\x5e\x0d\xa9\x20\xdb\x45\x41\xa7\x68\x04\x85\x42\xc8\xd2\xb3\x35\x90\xfe\x21\x39\x1d\x0e\xd9\x77\x97\x6c\x0a\xb1\xc8\xe6\x65\x9f\xa7\xcf\x8f\x5f\x42\x3e\x86\x03\x00\x00\x76\x97\x3d\x0b\x36\x83\xaf\xcf\x43\xe4\xd1\xa2\xa6\xc6\xb1\x19\xb0\xa9\x2d\x3c\x49\xa9\x74\x69\x70\x8b\x15\xd6\x04\x29\x74\x76\x56\x53\xf9\x4f\x97\xc6\x16\xa3\xcb\x84\x1d\xb7\xfb\x49\x84\x94\xcb\xc5\xab\x90\xb7\x2f\x42\x3c\x2c\x4f\xe0\x3b\x3b\x5d\x51\x2d\x65\xab\x36\xe8\x22\xe8\x45\x02\x29\x58\x13\x25\x57\x21\x51\x51\xf0\x3f\x61\x93\x88\xaa\x88\x9c\x59\x75\x84\x01\x5b\x3a\x5c\xf7\xad\x16\x4b\xf1\xf4\x76\xea\xa4\x58\x93\xdb\xf5\x57\xd9\xfc\xec\xe4\xc7\xed\x9c\x71\x8a\x5b\x87\x1b\x7c\x0f\x0d\xb7\x4d\x81\x9e\x9a\x1a\xb9\x2e\x95\x53\x9a\xd0\xf1\x3c\x2f\xc6\x3c\x02\xf3\x02\x49\x19\xcb\x47\x37\x8f\xd7\xd9\x3c\x0d\x75\xc2\xfb\xb6\x22\xbb\x5f\xfc\xc9\x97\xcc\xd6\xd0\x4e\x4a\x32\x15\x42\x0a\x5e\x3b\xd3\xd2\xef\x76\xd3\xf1\xe1\x09\x78\x72\xeb\xf0\x77\x9e\x8f\x82\x82\x30\x15\x7a\x52\x55\x7b\x34\xf9\x16\x19\x0e\xf6\x9f\x01\x00\x00\xff\xff\xd8\xad\x04\x2a\x59\x02\x00\x00")

func profileAchievementsJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileAchievementsJson,
		"profile/achievements.json",
	)
}

func profileAchievementsJson() (*asset, error) {
	bytes, err := profileAchievementsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/achievements.json", size: 601, mode: os.FileMode(438), modTime: time.Unix(1608594779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileAttributesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xdf\x4b\xc3\x30\x10\xc7\xdf\x07\xfb\x1f\x42\x9f\x1c\xa8\xb8\x39\x45\xf6\x30\x08\xe9\xd9\x86\xb5\x59\x48\x0f\x7f\x3c\x85\xda\x15\x56\xa8\x73\x74\x51\x04\xd9\xff\x2e\xba\x09\xda\x8d\x11\xbb\xf4\x71\xc7\xe0\xf3\xe9\xf7\x2e\x77\x1f\xdd\x0e\x21\x84\x78\x09\x2a\x10\x01\x86\xde\x88\x6c\x4b\xdf\xe5\x55\x5e\xe6\x99\x79\xa9\xbc\x11\xf1\x4c\xfa\x54\xe6\xe7\xd9\x3c\xad\xd2\xcc\xe4\x95\xd6\xcb\xb4\x4a\x9f\xb5\x2e\x8b\x95\x19\x2d\xcc\xfc\x2c\x9b\x17\xe5\xec\x64\xd0\x23\xa6\xfa\xf5\xbb\xdf\x23\x63\x62\x66\x7f\xfe\xe1\x6d\x10\xeb\xd3\x2d\xdd\x87\x07\x04\xc5\xf1\xd1\x3d\x7e\x60\x81\xbf\xe3\x48\xa3\x56\xe8\x97\x16\x74\x2e\x10\xa2\x88\x07\x20\x18\xb8\x37\x18\x5a\x18\xc4\x5c\xf8\xee\xc9\x57\x16\x64\xa6\x38\x72\x46\x23\x1d\x72\xd4\x8a\xa2\x83\x00\x86\x8d\xe6\x0f\x41\xc5\x5c\x50\xe4\x53\xe1\x5e\xc1\x66\x06\x7d\xae\x80\x61\x8b\x39\xd8\x8c\xa2\x0f\xb7\x20\x12\x07\xf0\xeb\x06\x4d\x88\x69\xc0\x99\x6e\x4d\xc1\xa6\x09\x14\x91\xb2\x89\x96\xd3\x7b\x50\xc7\x1b\xdc\x34\x08\x21\x99\xf0\x28\xd2\x89\x04\x70\xf0\x22\xeb\x02\xff\x88\x60\xd3\x0c\x39\x45\x10\xcc\xc1\x5e\xec\x5f\x34\xc8\x22\x04\x1a\x71\x11\xb4\xee\x62\x13\x4b\x22\xc1\x5d\x5f\x76\x0c\x6c\xde\x26\x82\xa0\xcc\xc9\x91\xea\x37\x39\xd1\x92\x43\x2b\x6c\x9b\xf0\x43\x79\x00\xbc\xc3\x24\x63\xf2\x5a\xd6\xbf\xae\x2c\xea\x95\x59\xf1\x56\x2f\xad\x96\xe9\xe2\xf0\x8a\x92\x3a\x90\x9a\x39\xd6\x19\x1c\xab\xa3\x25\x55\x34\xfe\xba\x61\x5a\xd0\xf8\xd0\xee\xdc\x6f\xb7\x47\x68\x4f\x27\x4d\xfe\x6e\x7e\x0c\xba\x9d\x75\xb7\xf3\x19\x00\x00\xff\xff\xcc\x9f\x4f\x28\x3c\x0a\x00\x00")

func profileAttributesJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileAttributesJson,
		"profile/attributes.json",
	)
}

func profileAttributesJson() (*asset, error) {
	bytes, err := profileAttributesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/attributes.json", size: 2620, mode: os.FileMode(438), modTime: time.Unix(1608589824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileCharacterJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x5d\x4f\xdb\x30\x18\x85\xef\x91\xf8\x0f\x56\xaf\x28\x83\x86\xaf\x2b\x84\x32\x99\x26\xab\x32\xb5\x49\x95\x7a\x45\x68\x9e\x2c\xd7\x71\x69\x46\xbe\xe4\x98\xc2\x84\xfa\xdf\xa7\xa4\x15\x4b\xec\x34\xc0\x98\x06\x37\xad\x64\x3b\xef\x39\xc7\xaf\xfd\xc8\x8f\xbb\x3b\x00\x00\xd0\x81\x7d\xe4\x4c\x6d\xd2\x1f\xc2\xc9\xe4\xab\x77\xd9\x39\x07\x9b\x99\x72\x36\xe7\x11\x67\x32\x15\x9d\x73\xd0\xe9\xb1\x05\x15\x94\x49\x2e\x08\x61\x11\xcd\x73\x12\xb2\x34\x01\x26\x08\xe3\x9b\xf3\x44\x2e\x0e\xd9\x22\x8c\x82\xbd\xe3\x6e\x67\x5d\x60\x75\xd0\x2c\x41\x86\xf6\xd4\x1e\xbe\x4a\x88\x04\x54\x52\x60\x82\xac\xae\x73\x50\x29\x20\xf8\x0d\x7f\x28\xbe\x2e\xab\x83\xbd\xcf\xe3\x8b\x21\x5f\xf2\xc8\xc4\x38\xd8\xd7\x2d\x4d\x21\x82\x7e\x9b\x87\xb9\xa0\x31\x27\xa4\xb4\x42\xc8\x9c\x32\xde\x94\xb4\xea\x80\x4a\x29\xc2\xd9\x9d\xe4\xc5\xf7\xb9\x60\xaa\xe6\xa5\xe3\xbd\x30\x74\xce\xa3\x79\x98\x48\x91\x06\x77\x4c\x86\x69\xa2\x56\xfa\xe2\xdb\x36\xe9\x7b\xa3\x31\x74\xaf\x95\x92\x2e\x1c\xd9\xf5\xa1\x56\xa5\xb9\xe0\x9c\xa5\x71\x46\x93\x5f\x84\x24\x34\x2e\x42\x2e\xce\x2a\x19\x4f\xba\xc0\x04\x74\x6b\x68\x3d\xf8\x42\xf0\xb9\xb6\xe2\xa9\x39\x46\x94\x06\x3c\x97\x69\xc2\x8d\x8a\xb4\x51\x74\xcb\xb1\xcc\xde\xa7\xae\xd1\xf9\xf3\xe9\xaa\xba\xbb\x4e\xdf\x73\xc9\x10\x5e\xdb\xfe\xa4\x21\xdf\xa5\x87\x90\x37\xd2\x27\xb4\xf0\x41\xb8\xdc\x9a\x9f\x09\x9e\x4b\x60\x82\x20\x5c\x3e\xd3\xeb\xe7\x7a\xde\x94\xa0\x5c\x3f\x72\x2c\x6b\xd8\xd0\xa0\x8f\xe6\x13\x79\xe3\x8f\x67\xb2\x72\x32\x94\x0b\x31\xf0\xa1\x6b\x6d\xb9\x11\x5b\x0d\x1f\xce\xa2\x94\xdd\x56\x6c\x9d\x75\xd7\x7e\xd5\xe3\x9f\xd5\x06\x9a\xa9\x53\x9c\x60\x97\xc6\xdc\xc4\xf8\x7e\x1f\x14\x3f\x5d\x60\x94\xff\x25\x8a\x7c\x9a\xdc\x9a\x3d\x9d\x43\x83\x6f\xd0\xb7\x1c\xe8\x12\xcb\x76\x50\x9b\xf3\x4c\xf5\xbd\xbe\xae\x35\xf7\x6a\x71\x9d\x05\xda\x66\xd4\x29\x37\x4b\x1f\xd4\xec\xca\x8a\x42\xb3\x49\xc6\x82\x6d\xe6\x75\xef\xb3\x50\xc8\x85\x5a\x68\xec\xf9\xc8\x87\x0e\x6a\xab\xf4\x33\x27\x24\x8c\xe9\x0d\x27\x59\x9a\xdd\x65\x6f\x65\xf2\x78\x3a\x26\xc8\x86\xa3\xb7\x51\x34\x5b\x66\x92\xd3\xf8\x7f\x13\x74\x23\xfb\x7e\xf4\x7c\xca\x5d\x5e\xf6\x4d\x63\x3e\x26\x40\x5f\x63\xf5\xe4\x1d\x19\xfa\x1a\x9f\xa7\xff\x1a\xa3\x3e\xec\x97\xcf\x34\x97\x0c\x6c\xd7\xb2\xdb\xde\x47\xed\x24\x3d\x7e\x23\x49\x7d\xca\x78\x81\xcb\x8b\x99\xc0\xd8\x30\x8b\x21\x24\xc2\x59\x39\x06\x30\x36\x4a\xa6\x0e\x78\x12\x70\x61\xf6\x34\xee\x4d\x6c\x7f\xda\x6a\x3e\x53\xa8\x76\x9f\x8a\x28\xd8\xba\xb1\x75\x6b\x57\xc5\xda\x92\xf2\xdd\xef\x18\xe7\x18\x3f\x3c\x1e\x1d\xc1\xa3\xd5\x0f\x8c\xf7\x8a\x79\xab\xbf\x9e\xc4\x58\xf3\x85\x1c\xa4\x1e\xdd\xb6\x37\xa7\x0c\x65\xa4\xc1\x16\x79\x57\xee\x5f\xb7\xe5\xf4\x65\x6d\xd9\x48\xee\xee\xac\x7e\x07\x00\x00\xff\xff\x8f\x6e\x7b\xc8\x25\x0c\x00\x00")

func profileCharacterJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileCharacterJson,
		"profile/character.json",
	)
}

func profileCharacterJson() (*asset, error) {
	bytes, err := profileCharacterJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/character.json", size: 3109, mode: os.FileMode(438), modTime: time.Unix(1608584606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileClassjobJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9b\x5d\x6b\xdb\x3c\x14\xc7\xef\x0b\xfd\x0e\xc6\x57\x4f\xe1\xd9\x60\x6d\xf7\xd6\x8b\x81\xe2\x68\xb1\x66\x59\x2a\xb2\xdd\x8e\xdd\x84\x2e\xcd\xa8\x87\x49\x20\x75\xcb\x60\xf4\xbb\x8f\x75\x1b\x4b\x3d\x45\x8e\x64\xbd\x1c\xdf\xb5\x22\x8a\x7e\xf6\xff\xaf\xe3\x73\x8e\xe2\xef\x87\x07\x51\x14\x45\xf1\x84\x7f\xfa\x80\xe2\xb3\xe8\xf7\xff\x8f\x63\x14\x5f\x60\xfa\x74\xec\x71\xfc\x76\xd9\x2c\x17\xed\x7a\x13\x9f\x45\xf1\x75\x7d\xff\x7c\x71\x73\xb5\xb9\x5a\xb4\xcb\xcd\x7c\xfe\x75\xfd\x79\x3e\x6f\xea\xdb\xf6\x6c\xd5\xde\x3c\x5b\xdc\xd4\xcd\xf5\x7f\xaf\x8f\xa2\x77\xd1\x75\x7d\xbf\x35\x74\x7c\x14\xff\xfd\xce\x87\xff\xb7\xd6\xcc\x71\x59\x52\xec\x64\xd1\xd3\x9d\x8b\x32\x94\xbb\x59\xf2\xe4\xc9\x92\xbf\xfe\xfc\xb3\x72\x8c\x2b\x81\xb3\xee\x3d\xc7\x1f\xcf\x87\x93\xbc\xd5\xb9\x78\x4b\x2a\x4b\xd6\xdc\xad\xb2\x9d\x1b\x2e\x59\x52\x79\xc3\xcf\x11\x45\x53\xc2\x0c\x5c\xbe\x4d\xb2\x58\xaf\xda\xe5\xaa\x95\x5c\xed\x3f\x43\x2f\x7e\x0e\xdd\x35\xdd\x0f\x35\x75\xf7\x33\xfb\xde\xb7\x8a\x51\x9e\x64\x45\x89\xca\xbe\xdb\xe7\x97\xf8\x64\x27\x71\xbf\x9f\xfd\x92\x9e\xaa\x0c\x72\x89\x84\x20\x5c\xc0\x32\x88\x64\x1a\x70\x83\x48\xa6\x01\x35\x88\x64\x9a\xd2\x20\x53\x24\xb2\x8c\x91\x59\x5a\xc2\xf2\xc8\xc9\xe8\x3c\x22\x21\x06\xea\x11\x09\xa9\xd2\x23\xb3\x8a\x4d\x04\x46\x19\x06\x16\x47\x4e\x47\xe7\x11\x09\x31\x50\x8f\x48\x48\x95\x1e\xc9\x39\xcb\xfc\xb9\xe3\x78\x74\x69\x88\x21\x71\x00\x77\x18\x92\xaa\x9f\x32\x02\xcd\x38\xf7\x98\xa7\xee\x73\x11\xb0\xd2\x10\x43\x62\xa0\x06\xd1\x4d\x43\x18\x61\x46\xc5\xba\xc3\x4b\x80\x95\x81\x18\x12\x03\xb5\x87\x6e\x06\x52\xa0\xbc\x12\x88\xc0\x32\x08\xac\xf4\xc3\x90\x18\xa8\x41\x74\xd3\x8f\xcb\x94\x94\x38\x47\x33\x6c\xda\xf0\x6b\x96\x57\x9b\x2f\xf5\x37\xb5\x47\x03\x76\x3f\x9c\x43\x0e\x31\x82\x73\x38\x75\x70\x48\x52\x4e\x91\x49\x6d\x62\x97\xdb\x51\x3e\xe1\x1c\x12\x8e\xf2\xba\x59\x03\x2a\x4a\xc1\x29\x9f\x11\x64\x92\x5a\xda\x65\x77\x94\x2e\x38\x87\x84\xa3\xbe\x6e\x52\x30\x41\x62\xea\x54\xf6\x80\x55\xa6\x73\x48\x3f\xb2\xbb\xa8\x25\x73\x94\xa4\x84\x91\xc2\xa4\x61\x69\x97\x3c\x78\xc0\x0f\x50\x33\x3a\x87\xeb\xe9\x56\xb3\xc4\xa8\x0b\x69\x17\x3b\x78\xac\x0f\x50\x0d\x3a\x87\x53\xc7\x7a\x8a\x92\xcc\x30\xbf\xbf\x6b\x3a\xc7\xae\xdd\x3a\xc3\x47\x40\x1f\x0c\x31\x44\xbb\xc1\x8b\xab\xf3\xef\x2a\xcf\x39\x33\xda\x96\x7a\x60\x8e\xe2\xed\x60\x08\x7f\xd2\xe8\xc6\x4b\x81\xa7\x5e\x36\x8d\xa3\x80\x38\x18\xc2\x9f\x32\xfa\x01\xad\x32\xed\x57\xe8\x81\x39\xea\x52\x0d\x86\xf0\x27\x8d\x6e\x2f\x29\x41\xe2\x1c\xb3\xd2\x66\x9e\xf1\x72\x0c\xbd\x24\x7b\x90\x0e\xf2\x0c\x7b\x70\xfd\x79\x46\x91\x93\x32\x0d\x2e\xbe\xdf\xea\xc2\x1e\x24\x1c\xf1\xb5\xdb\x49\x22\xe7\x02\xc0\xb6\xf7\x5b\x5e\xd8\x83\x84\xa3\xbc\xf6\x2f\x5c\x38\x9d\xc2\xd8\xf5\x8e\x1e\xd7\xce\x21\xe1\x68\xaf\xfb\xb8\xa7\x18\x95\x29\x16\x97\x5c\x98\xfd\xc0\xc9\x2e\xbd\x64\x1a\x3c\xfd\x25\xd3\xe0\xe8\x2f\x99\xa6\x3e\x3a\xc4\xe8\x02\x80\xf0\xaf\xc6\x20\xbc\x04\x12\x8e\xf0\x12\x38\xf5\xe3\x9e\x26\x29\xce\xad\x36\x92\x0d\xc9\xb5\xde\x27\x09\xa5\x7d\xef\xcb\x20\x21\xb5\xef\x7d\x39\xa6\x5b\xe3\x55\x94\x30\x24\xac\x1e\x1c\x1a\xa2\xbf\x19\x83\xf8\x12\x48\x38\xe2\x4b\xe0\xd4\x27\x48\xc4\xac\x5b\xb9\x3f\x35\xbc\x93\x43\x7b\x90\x7e\x74\x77\x71\x72\x38\xe1\x25\xb2\x7b\x70\x68\x08\x1e\xbc\xb4\x87\x73\x70\x68\x0f\x4e\x29\xfd\x7b\x52\xa4\x00\xf6\x7c\xf0\xca\x1e\xce\xc1\xa1\x3d\x38\xa9\xf0\x87\x07\x0f\x3f\x02\x00\x00\xff\xff\x0d\x8c\x9e\xcf\x09\x3c\x00\x00")

func profileClassjobJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileClassjobJson,
		"profile/classjob.json",
	)
}

func profileClassjobJson() (*asset, error) {
	bytes, err := profileClassjobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/classjob.json", size: 15369, mode: os.FileMode(438), modTime: time.Unix(1608509213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileGearsetJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\xdc\x41\x6b\x1a\x41\x18\xc6\xf1\x7b\x20\xdf\x61\xd9\x53\x0b\x35\x54\x8d\x4d\xeb\x21\x30\xd1\xd1\x2c\x59\x57\x58\xb7\x94\x9c\xa4\xd5\x80\x82\xc4\xd0\xda\x5e\x4a\xbe\x7b\xd1\x5a\x1a\x41\x31\xcd\xbc\xcf\x33\x6f\xdf\x5b\x19\x72\xd8\xff\x6c\x69\x7e\x2c\xf4\xf9\x79\x7a\x92\x24\x49\x92\x0e\x5c\x56\x5c\xbb\xa2\x9b\xb6\x93\xed\xd1\xe6\xb8\x70\x03\xbf\x7b\xb4\x39\xfe\x76\xb7\xb8\x9b\xac\x96\x5f\xd3\x76\x92\x9e\xcd\x27\xcb\xfb\xda\xa4\x56\x7b\x9b\x5c\x26\x67\xd3\x2f\xb5\xd5\x72\xb9\x58\xcd\x1f\x92\xcb\x64\x3a\xff\xd1\xbe\x5f\xcd\x6a\x93\xd9\x7c\x31\x7d\x55\x7f\x2d\x77\xd4\x58\x1f\xcd\x1a\x3b\x27\xe9\xdf\x87\x7c\x7c\xf3\xa4\xa1\x7b\x35\xce\xb3\xe2\x86\x9b\xb1\x79\xc0\xcf\x3b\x3f\x73\xe8\xf9\x06\x59\xe9\xfa\x7e\xac\xfa\xaa\x77\x8f\x9a\xeb\xa3\x87\x67\x5d\xfe\x36\x2e\xca\x3b\x90\xec\x7b\xf6\xdb\x1c\x55\x2e\x2b\x34\x76\xee\x3d\x3a\xf8\xda\x5c\xe5\xcb\xcc\x8d\xeb\xdc\x92\xd6\xfa\xe8\xfb\xe2\xc9\xc9\xc5\xfa\x64\x31\x3f\xf6\x0a\x8f\x75\x34\xf4\x75\xec\xf9\x7b\x77\xbc\xa3\xa9\xaf\xa3\xf9\x92\x8e\x73\x7d\x1d\xe7\x2f\xe9\x68\xe9\xeb\x68\xfd\x4b\x47\xa7\xf4\xae\x1a\x96\x11\x7e\xf9\x5c\x1c\xf8\xa9\xc3\xff\xca\xfe\xfe\xe3\x9f\xc7\x4f\x87\xbd\x5e\x20\x58\xea\x36\xc0\x22\x93\x81\x05\x0b\xfd\xaa\xc9\x60\xd1\xd7\x87\x01\x0b\xb3\x13\x0b\x16\x99\x92\xf8\x60\xe1\x75\x60\xc1\xc2\xeb\xc0\x82\x85\xd7\x81\x05\x0b\xaf\x03\x0e\x16\x99\x94\x60\xb0\x5c\x7b\x17\xa2\x95\x86\x0d\xad\xc8\x64\x60\xb5\x42\xbf\x6a\xb2\x56\xf4\xf5\x61\xb4\xc2\xec\xc4\x6a\x45\xa6\x24\xbe\x56\x78\x1d\x58\xad\xf0\x3a\xb0\x5a\xe1\x75\x60\xb5\xc2\xeb\x80\x6b\x45\x26\x25\x58\x2b\x57\xc3\xee\x6d\x80\x56\x9a\x36\xb4\x22\x93\x81\xd5\x0a\xfd\xaa\xc9\x5a\xd1\xd7\x87\xd1\x0a\xb3\x13\xab\x15\x99\x92\xf8\x5a\xe1\x75\x60\xb5\xc2\xeb\xc0\x6a\x85\xd7\x81\xd5\x0a\xaf\x03\xae\x15\x99\x94\xf0\x6f\x2b\xae\xe8\x8e\x02\xb8\x72\x6e\x83\x2b\x32\x19\x58\xae\xd0\xaf\x9a\xcc\x15\x7d\x7d\x18\xae\x30\x3b\xb1\x5c\x91\x29\x89\xcf\x15\x5e\x07\x96\x2b\xbc\x0e\x2c\x57\x78\x1d\x58\xae\xf0\x3a\xe0\x5c\x91\x49\x09\xe6\xca\x27\x97\x8d\xaa\x00\xae\xb4\x6c\x70\x45\x26\x03\xcb\x15\xfa\x55\x93\xb9\xa2\xaf\x0f\xc3\x15\x66\x27\x96\x2b\x32\x25\xf1\xb9\xc2\xeb\xc0\x72\x85\xd7\x81\xe5\x0a\xaf\x03\xcb\x15\x5e\x07\x9c\x2b\x32\x29\xc1\x5c\xc9\x7d\x3f\xe4\xe3\xca\x3b\x1b\x5a\x91\xc9\xc0\x6a\x85\x7e\xd5\x64\xad\xe8\xeb\xc3\x68\x85\xd9\x89\xd5\x8a\x4c\x49\x7c\xad\xf0\x3a\xb0\x5a\xe1\x75\x60\xb5\xc2\xeb\xc0\x6a\x85\xd7\x01\xd7\x8a\x4c\x4a\xb0\x56\x7a\xde\x87\x7c\x5b\xb9\xb0\xa1\x15\x99\x0c\xac\x56\xe8\x57\x4d\xd6\x8a\xbe\x3e\x8c\x56\x98\x9d\x58\xad\xc8\x94\xc4\xd7\x0a\xaf\x03\xab\x15\x5e\x07\x56\x2b\xbc\x0e\xac\x56\x78\x1d\x70\xad\xc8\xa4\x04\x6b\xc5\xbb\xb2\xcc\x8a\xa0\xef\x2b\xef\x6d\x88\x45\x26\x03\x2b\x16\xfa\x55\x93\xc5\xa2\xaf\x0f\x23\x16\x66\x27\x56\x2c\x32\x25\xf1\xc5\xc2\xeb\xc0\x8a\x85\xd7\x81\x15\x0b\xaf\x03\x2b\x16\x5e\x07\x5c\x2c\x32\x29\xc1\x62\x29\x7c\xe7\x26\x77\x1d\x1f\x20\x96\x0f\x36\xc4\x22\x93\x81\x15\x0b\xfd\xaa\xc9\x62\xd1\xd7\x87\x11\x0b\xb3\x13\x2b\x16\x99\x92\xf8\x62\xe1\x75\x60\xc5\xc2\xeb\xc0\x8a\x85\xd7\x81\x15\x0b\xaf\x03\x2e\x16\x99\x94\xf0\xff\xcb\x5c\xba\x8e\xcf\x7d\x15\xf2\x91\xa5\x6e\x64\xde\x56\xa8\x03\x3c\x17\xa7\x6f\x00\x56\x78\x2f\x4e\x5f\x20\x68\x30\xce\xce\xc4\xad\x50\x4a\x7c\xb8\x10\x43\xc0\x9b\x71\x56\x56\x6e\x89\x21\xe0\xd5\x38\x43\x3b\xb7\x42\x2d\xc1\x7a\x29\xb3\xa2\x5f\x0f\x91\x8b\x95\x9d\xdb\xff\x62\xe8\x56\xdf\x12\xac\xb0\x5c\xf4\x05\x82\xe4\x62\x68\xeb\xd6\xcc\xd8\xad\x99\xb5\x5b\x33\x73\xb7\x66\xf6\x6e\x2d\x0d\xde\x2a\x59\xbc\x5d\xcb\xa5\x11\x22\x17\x23\x9b\xb7\x42\x1d\x60\xb9\xe8\x5b\x85\x15\x96\x8b\xbe\x40\x90\x5c\xec\xec\xde\x0a\xa5\x28\x90\x8b\x95\xe5\x5b\x62\x08\x58\x2e\x56\xb6\x6f\x89\x21\x78\xb9\x28\x59\xbf\x1d\x0d\x3f\xe6\x9d\xf2\x76\x54\xb9\x3c\xc4\x2f\xcd\xfd\xbf\x04\xe2\x21\x66\x9b\x79\x7a\xf2\xf8\x2b\x00\x00\xff\xff\x59\x89\xa9\x51\xf9\x71\x00\x00")

func profileGearsetJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileGearsetJson,
		"profile/gearset.json",
	)
}

func profileGearsetJson() (*asset, error) {
	bytes, err := profileGearsetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/gearset.json", size: 29177, mode: os.FileMode(438), modTime: time.Unix(1608509133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileMinionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x50\x50\xf2\xf1\x0c\x0e\x51\xb2\x52\x80\x72\xc1\x42\xc5\xa9\x39\xa9\xc9\x25\xf9\x45\x4a\x56\x0a\x4a\x7a\xb9\x99\x79\x99\xf9\x79\xf1\xf1\x39\x99\xc5\x25\x4a\x10\x45\xb5\x3a\x50\xbd\x7e\x8e\xbe\xae\xc4\xe8\xcd\x4b\xcc\x4d\x85\xe9\xe5\xe5\xaa\x05\x04\x00\x00\xff\xff\x06\x70\x28\x65\x7b\x00\x00\x00")

func profileMinionJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileMinionJson,
		"profile/minion.json",
	)
}

func profileMinionJson() (*asset, error) {
	bytes, err := profileMinionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/minion.json", size: 123, mode: os.FileMode(438), modTime: time.Unix(1608509295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileMountJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x50\x50\xf2\xf1\x0c\x0e\x51\xb2\x52\x80\x72\xc1\x42\xc5\xa9\x39\xa9\xc9\x25\xf9\x45\x4a\x56\x0a\x4a\x7a\xb9\xf9\xa5\x79\x25\xf1\xf1\x39\x99\xc5\x25\x4a\x10\x35\xb5\x3a\x50\xad\x7e\x8e\xbe\xae\x44\x68\xcd\x4b\xcc\x4d\x85\x69\xe5\xe5\xaa\x05\x04\x00\x00\xff\xff\x23\x52\xb5\x13\x79\x00\x00\x00")

func profileMountJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileMountJson,
		"profile/mount.json",
	)
}

func profileMountJson() (*asset, error) {
	bytes, err := profileMountJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/mount.json", size: 121, mode: os.FileMode(438), modTime: time.Unix(1608509312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchCharacterJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x5f\x6f\xda\x30\x14\xc5\xdf\x91\xf8\x0e\x56\x9e\x08\x2d\x7f\xa6\x4d\x9a\x86\xa6\x4c\x19\xa4\x55\x34\xe6\xa0\x24\x74\x9b\xea\xea\xca\x4d\x0c\x64\x35\x36\x72\xcc\xd2\xad\xe2\xbb\x4f\x0e\x65\x85\x74\x61\x54\x7b\xcc\x3d\x27\x27\xbf\x7b\x64\xe7\xa1\xd9\x40\x08\x21\xcb\xc3\x71\xe8\x7b\x11\x0c\x03\x1c\xbb\x3e\xf6\x42\x6b\x80\x1e\xb5\x52\xcf\x19\x67\x89\x96\xca\x1a\x20\xab\xcb\xd3\x5c\x03\x14\x99\x48\x65\x61\x6d\x4d\x9b\xf3\xbd\xa0\x6f\x95\x97\xc3\x20\x88\x0f\x47\xcf\x32\xd3\xec\x47\x97\x09\xad\x7e\x5a\x4f\xa6\x5d\x66\x69\x76\xaf\xdc\xd8\x0d\xff\x91\xb2\x8d\x00\x48\x16\x54\x51\x80\x19\x4d\x18\x72\x50\xb6\x9c\xd7\xa5\xfa\xa3\x13\x13\x79\x26\xee\xac\xf3\x8a\x91\x6a\xad\xb2\xdb\xb5\x66\xc6\xb9\x50\x6c\xf6\xcc\xa1\xd8\x9c\xdd\x1b\xb5\xc7\x65\xca\x72\x2d\x05\xeb\x95\x70\x89\x66\xaa\xd7\xfa\x30\x79\xef\x8f\x1c\x42\xd2\xb6\xdd\xab\x43\x1c\xbb\xf8\xf2\x65\x6b\x73\x2a\x6a\x17\xc6\xee\x67\xef\xc4\x34\x41\x97\xac\x2e\x26\x74\xf1\xa7\x17\x41\x65\x62\x26\x91\x83\xba\xdf\x73\x00\x2d\x25\xd7\xd9\xea\x78\x9d\x29\xd5\xb4\x53\xe7\x7c\xaa\x15\x11\x52\x9c\x21\x53\x64\x48\xc5\x1d\xa6\x4b\xe6\x74\xcf\xec\x63\xd8\xe0\x0f\x03\xfc\xbf\xec\x8f\xa7\xea\xe8\x06\xb9\x4a\xea\x38\x22\x2f\xbc\xaa\x5e\xb1\x5a\x88\x42\x2a\x9e\xd6\x57\x60\x76\xff\x62\x2c\x0e\x21\x45\xdb\xbe\x26\x24\x27\xe4\xfe\xa1\xdf\x77\xfb\x9b\x1b\x42\x5a\x46\x1f\x0d\xb7\x22\x21\x07\xd5\x54\xae\xee\xd8\x8f\x62\xc0\xde\xd7\x18\x3e\x4e\xe3\xb8\x5a\xd2\x01\xdb\x9a\x77\x6f\xb5\x00\x58\xd1\x39\x53\x03\xa1\x17\x9d\x64\x91\xf1\xb4\xf5\xd6\x46\x0e\xe2\xd9\xde\xe4\x8d\x99\xd0\xbd\xc1\x2b\x7b\x7f\x97\xbf\xdc\xa1\x0a\xd5\xc4\xbd\xf4\xc0\xc7\x17\xc1\xa9\x38\x55\x82\xd7\x87\x1f\xfc\x53\xdc\x84\xce\x59\x79\x72\x86\x6b\xa5\x98\xd0\xe6\xd9\xb9\xee\x77\xde\xb5\x6f\x6c\x24\x67\xa5\x84\xd7\x4b\x33\xce\x77\xf3\x2a\x1c\x0e\x20\xf4\xa2\xe9\x38\x8e\xe0\x22\x98\xe2\xd1\xb1\xbf\xe6\x8a\x2a\x9d\x03\xfc\x62\x4a\xee\x62\x9a\x8d\x4d\xb3\xf1\x3b\x00\x00\xff\xff\xda\x81\x7f\xd8\x83\x05\x00\x00")

func searchCharacterJsonBytes() ([]byte, error) {
	return bindataRead(
		_searchCharacterJson,
		"search/character.json",
	)
}

func searchCharacterJson() (*asset, error) {
	bytes, err := searchCharacterJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search/character.json", size: 1411, mode: os.FileMode(438), modTime: time.Unix(1608594368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.json":                 metaJson,
	"profile/achievements.json": profileAchievementsJson,
	"profile/attributes.json":   profileAttributesJson,
	"profile/character.json":    profileCharacterJson,
	"profile/classjob.json":     profileClassjobJson,
	"profile/gearset.json":      profileGearsetJson,
	"profile/minion.json":       profileMinionJson,
	"profile/mount.json":        profileMountJson,
	"search/character.json":     searchCharacterJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.json": &bintree{metaJson, map[string]*bintree{}},
	"profile": &bintree{nil, map[string]*bintree{
		"achievements.json": &bintree{profileAchievementsJson, map[string]*bintree{}},
		"attributes.json":   &bintree{profileAttributesJson, map[string]*bintree{}},
		"character.json":    &bintree{profileCharacterJson, map[string]*bintree{}},
		"classjob.json":     &bintree{profileClassjobJson, map[string]*bintree{}},
		"gearset.json":      &bintree{profileGearsetJson, map[string]*bintree{}},
		"minion.json":       &bintree{profileMinionJson, map[string]*bintree{}},
		"mount.json":        &bintree{profileMountJson, map[string]*bintree{}},
	}},
	"search": &bintree{nil, map[string]*bintree{
		"character.json": &bintree{searchCharacterJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
