// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// lodestone-css-selectors/meta.json
// lodestone-css-selectors/profile/achievements.json
// lodestone-css-selectors/profile/attributes.json
// lodestone-css-selectors/profile/character.json
// lodestone-css-selectors/profile/classjob.json
// lodestone-css-selectors/profile/gearset.json
// lodestone-css-selectors/profile/minion.json
// lodestone-css-selectors/profile/mount.json
// lodestone-css-selectors/search/character.json
package pack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xcd\x4a\x03\x31\x1c\x04\xf0\x7b\xa1\xef\x30\xe4\xb4\x0b\x25\x1f\xb6\xb1\xa0\xa7\xa2\x45\xa1\x2e\x16\x6a\xd5\x5b\x49\xb7\x7f\x6b\xd8\x90\x2c\xd9\xd4\xc3\x8a\x6f\xe3\x9b\xf8\x62\x12\x56\x3c\xf5\x3c\x3f\x86\x99\xcf\xf1\x08\x00\xd8\x07\xc5\xce\x06\xcf\xae\xc0\x24\x57\x92\x4b\x36\xf9\x4b\x4e\x1d\xc5\xc5\x91\x7c\xba\xa5\xae\x49\xa1\xcd\xa4\x3e\x45\x27\xe6\x7c\x3e\x3d\xe7\xaa\xb0\xb7\x8e\x32\xab\x42\x6f\x9d\x33\x42\x73\x89\xc2\xae\xdf\x83\xa7\x6b\xdc\xac\xb7\x78\xdc\x40\xc9\x9d\xd2\x3b\x8d\x62\x19\x8f\x3f\xdf\xbe\x27\x7f\xa0\x0e\xdb\xf6\x60\x12\x95\x70\xb6\x21\x54\xa6\xce\xf2\xb5\xc4\xa2\x6d\x1d\xbd\xd0\x7e\x65\x93\xb8\x94\x9a\x2b\xae\x34\x8a\xd5\xfd\x53\xf5\x30\x19\xec\x1d\xd5\x4d\x28\xf1\x3c\xdc\x10\xea\x22\x1b\x0c\x53\x84\x9a\x2d\xa7\x72\x86\x8d\x79\x33\xd1\xfe\x17\xb0\xf1\xe8\xeb\x37\x00\x00\xff\xff\x5d\x6e\xf1\x09\xff\x00\x00\x00")

func metaJsonBytes() ([]byte, error) {
	return bindataRead(
		_metaJson,
		"meta.json",
	)
}

func metaJson() (*asset, error) {
	bytes, err := metaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.json", size: 255, mode: os.FileMode(438), modTime: time.Unix(1608536211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileAchievementsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x4d\x4b\x03\x31\x10\x86\xef\x85\xfe\x87\x21\xa7\xae\xd4\x06\x3f\x4e\x8b\xac\x20\xed\x61\x41\xab\x60\x04\x0f\x85\x21\x26\x43\x37\x30\xcd\x4a\x76\x5a\x2c\xd2\xff\x2e\xeb\x07\x44\x85\xa5\xc7\x3c\x99\x79\xe6\x7d\xdf\xc7\x23\x00\x00\x75\x5b\x3f\x1a\x55\xc2\xf7\xf3\x13\x75\xc4\xe4\xa4\x4d\xaa\x04\x35\x63\xdf\x09\xa2\x75\x4d\xa0\x1d\x6d\x28\x0a\x54\xb0\xe5\x32\x4a\x73\xea\x9a\xc0\x7e\x72\x51\xa8\xaf\xdd\xc3\x34\x53\xe2\x72\xf1\x6c\xf0\xe6\xc9\x98\xfb\xe5\x80\x7e\xcb\xb3\x17\x89\x88\xaf\x76\x4d\x29\x93\x9e\x17\x50\x01\x87\x8c\x5c\xf6\xc4\x66\xe0\xec\xdf\xdd\x7a\x3e\x54\x84\xa2\xa4\xfd\xaf\x26\x6a\x9a\xcd\x26\x5a\xd3\x5b\x3f\xa8\xb9\xf5\xd4\x49\x1b\x49\xbb\xc6\x26\xeb\x84\x92\x5e\xad\xfc\x89\xce\x56\xb5\x27\xb1\x81\xf5\xe4\xfa\xe1\xaa\x9e\x57\xfd\x77\xa1\xff\xe6\x31\xf5\xdd\xe2\xa8\x44\x12\x76\x41\xf6\x88\x12\x36\xf4\x23\x19\x8f\x0e\x1f\x01\x00\x00\xff\xff\xad\x6f\x01\x44\xa3\x01\x00\x00")

func profileAchievementsJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileAchievementsJson,
		"profile/achievements.json",
	)
}

func profileAchievementsJson() (*asset, error) {
	bytes, err := profileAchievementsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/achievements.json", size: 419, mode: os.FileMode(438), modTime: time.Unix(1608532363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileAttributesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xd6\x4f\x6b\xf2\x40\x10\x06\xf0\xbb\xe0\x77\x58\x72\x7a\x5f\x68\x4b\xb5\xb6\x14\x0f\xc2\xb2\x99\x26\x83\x71\x5d\x36\x43\xff\x9c\x96\x98\x04\x0c\xa4\x2a\x31\x2d\x94\xe2\x77\x2f\xa8\x87\x56\x41\x56\xba\x6c\xaf\x0f\xc8\xfe\x78\x66\x18\xf3\xd9\xed\x30\xc6\x58\x90\x92\x06\x19\x51\x1c\x0c\xd9\x3e\xda\xc6\xeb\xb2\x2e\xf3\x76\xd9\x04\x43\x16\xb4\xd9\xac\x2e\xaf\xf2\x79\xd6\x64\x79\x5b\x36\xc6\xac\xb2\x26\x7b\x35\xa6\xae\xd6\xed\x70\xd1\xce\x2f\xf3\x79\x55\x17\xff\xfa\xff\xd9\x88\xb5\xb3\x65\xf1\xf1\x2d\xec\x6d\xc3\xe6\x28\x29\x7e\xfc\x30\xd8\xbd\xbc\xb9\xd8\xa3\x42\x78\x26\xd0\x48\x2f\xde\x54\x7d\x0b\xd5\x23\x12\x4f\x7c\xa2\x6e\x2c\x50\x28\x09\x92\x04\x23\x90\x02\xbc\xc1\x06\x16\xb0\x09\xca\xd0\x1b\xe8\xd6\x02\x24\x34\x12\x0a\x9e\x98\x18\xc9\x68\x4e\x0e\xea\x1a\xb8\x5c\x79\x02\x3d\x41\xc9\x09\xa7\xd2\x9b\xcc\x66\xed\x43\xd4\x20\xc8\x7f\x6b\x36\xdb\x1f\xc2\x03\xc8\xd4\x81\xe9\xce\xdd\x24\x27\x3c\x42\x61\x7c\xcb\x6c\x26\xc9\x89\xb8\x18\x1b\x35\x7d\x02\xfd\x7b\xd8\xbd\xbb\xca\xd2\x31\x26\x89\x49\x15\x80\x83\x93\x61\xe9\x3a\xa3\xb0\xdd\x44\xd5\x94\x40\x0a\x07\xd7\xbf\x77\xed\xae\xb9\x18\x78\x82\x32\xfa\x2b\xa2\x4d\x89\xa9\x02\x77\xc3\xb5\x85\xd9\x1c\x0f\x02\xc9\x85\x93\xff\xf3\x9e\xc3\x6f\x1f\x85\xe0\x93\x64\x33\xc1\x58\x9d\xf0\x1c\x51\xd8\x88\xbd\xd5\x87\x6f\xd6\xd5\x61\x52\x54\xef\x87\xd1\x7a\x95\x2d\x4e\x9f\x56\x65\x22\x65\x84\x63\x4e\xff\x5c\x4e\xb7\xb3\xf9\x0a\x00\x00\xff\xff\xcb\xfb\x17\x9b\x3f\x0b\x00\x00")

func profileAttributesJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileAttributesJson,
		"profile/attributes.json",
	)
}

func profileAttributesJson() (*asset, error) {
	bytes, err := profileAttributesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/attributes.json", size: 2879, mode: os.FileMode(438), modTime: time.Unix(1608509249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileCharacterJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x5b\x6f\x9b\x30\x14\x7e\xaf\xd4\xff\x60\xf1\xd4\x74\x6d\x50\x2f\x4f\x55\xc5\xe4\x06\x2f\x62\x22\x80\x88\x97\xa9\x12\x92\xe5\x18\x27\x61\xe3\x26\xe3\x66\x9d\xa6\xfc\xf7\x09\x12\x75\x60\x08\x4a\x76\xc9\x5e\xed\xf0\x5d\x8e\xcf\xf9\x72\x7e\x9c\x9f\x01\x00\x80\x06\x47\xd8\x9a\x21\x32\xb2\xe1\x74\xfa\xd1\x7d\xd2\x1e\xc0\xee\xa6\xba\x2d\x78\xcc\x99\xcc\x84\xf6\x00\xb4\x21\x5b\x51\x41\x99\xe4\x82\x10\x16\xd3\xa2\x20\x11\xcb\x52\x60\x80\x28\x59\x3e\xa4\x72\x75\xcd\x56\x51\x1c\x5e\xdc\x0c\xb4\x2d\xc0\xe6\xaa\x9b\x82\xd8\x68\x86\xec\xa3\x88\x48\x48\x25\x05\x06\xc8\x9b\x3c\x57\x35\x00\xc1\x97\xfc\xb5\xfc\xba\x42\x07\x17\xef\xbd\x47\x9b\xaf\x79\x6c\x04\x41\x78\xd9\x96\x34\x83\x18\xfa\x7d\x1a\x16\x82\x26\x9c\x90\x4a\x0a\x21\x0b\xca\xf8\x01\x4e\x9f\x2c\xf7\x40\x5f\x05\x8f\x17\x51\x2a\x45\x16\xbe\x30\x19\x65\xa9\x8a\xf4\xc1\x47\x88\x8c\xdc\x89\x07\x9d\x67\x05\xd2\x81\x13\xd4\x3c\xea\x65\x5a\x08\xce\x59\x96\xe4\x34\xfd\x4e\x48\x4a\x93\xd2\xc7\xea\xbe\x66\xe3\x76\x00\x0c\x40\xf7\x56\xb6\x59\x5d\x3d\xce\x42\x5e\xc8\x2c\xe5\x7a\x0d\x58\x2f\xcb\x6d\x99\xc6\xf0\xdd\x40\xd7\x7e\x7d\xba\xa9\x3f\x90\x35\x72\x1d\x62\xc3\x67\xe4\x4f\x3b\xd4\x3f\xb9\x18\xbb\x93\xf6\x45\xcb\x5a\x18\xad\xf7\xba\x63\x82\x17\x12\x18\x20\x8c\xd6\xfb\x1f\xab\x4b\x5c\xc5\x32\xb1\x4c\xd3\xee\xa8\xec\x09\x25\x60\xd7\x3b\x29\x7f\xed\xa9\x94\xfe\x1b\xfb\xd0\x31\xf7\x34\xe0\x5e\x2d\xd7\xf3\x38\x63\x5f\x6b\x8c\xf7\x83\xad\x14\xb5\xdb\xf2\xc6\x81\xda\xfb\xe3\x4f\xd0\x37\x2d\xe8\x10\x13\x59\xb8\x8f\x3c\x57\xa9\xb7\x0d\xde\x10\xa0\x82\xb7\xa7\xa7\xe5\xa7\x39\xfa\xf3\xec\x55\x95\xaf\xfc\xa2\xe4\xec\xa2\x31\x61\x9f\xf8\xb6\xf6\x79\x24\xe4\x4a\x05\xf2\x5c\x1f\xfb\xd0\xc2\x7d\x48\x5f\x0a\x42\xa2\x84\x2e\x39\xc9\xb3\xfc\x25\x3f\x20\xa8\xbc\x99\x47\x30\x82\x93\x3f\x8b\x96\x7c\x9d\x4b\x4e\x93\xbf\x1b\x2b\x3b\xd0\xff\x17\x29\x6f\xae\xaa\x59\xda\x55\xf6\xe4\xa9\x72\x8c\x8a\xdb\x7f\x13\x2c\xc7\x48\xb8\x3b\x22\x5b\x7c\x38\xaa\xb6\x01\x87\x8c\x91\x63\xa2\xbe\xbf\xe1\xfe\x78\xb9\x39\x2c\x5e\x3a\xd7\x84\xb2\xbd\x7c\xca\xb8\x31\xbc\x1c\x3c\xce\x45\x10\xe8\x46\x79\x84\x45\x34\xaf\xce\x40\x10\xe8\xd5\x16\x31\xe6\x69\xc8\x85\x31\x6c\xcd\xd0\x14\xf9\xb3\x5e\xf1\xb9\x92\x13\xdf\x32\x11\x87\x5d\x35\x7b\x83\xc4\x16\x56\x7b\xa5\x6f\x2b\x91\x91\x8c\x5b\xc9\x83\xdd\xcf\xce\x6f\x57\xf4\xee\xa8\xc0\x3e\x3f\xdb\xfc\x0c\x00\x00\xff\xff\xe9\xa9\xb5\xa7\x47\x0a\x00\x00")

func profileCharacterJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileCharacterJson,
		"profile/character.json",
	)
}

func profileCharacterJson() (*asset, error) {
	bytes, err := profileCharacterJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/character.json", size: 2631, mode: os.FileMode(438), modTime: time.Unix(1608527380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileClassjobJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9b\x5d\x6b\xdb\x3c\x14\xc7\xef\x0b\xfd\x0e\xc6\x57\x4f\xe1\xd9\x60\x6d\xf7\xd6\x8b\x81\xe2\x68\xb1\x66\x59\x2a\xb2\xdd\x8e\xdd\x84\x2e\xcd\xa8\x87\x49\x20\x75\xcb\x60\xf4\xbb\x8f\x75\x1b\x4b\x3d\x45\x8e\x64\xbd\x1c\xdf\xb5\x22\x8a\x7e\xf6\xff\xaf\xe3\x73\x8e\xe2\xef\x87\x07\x51\x14\x45\xf1\x84\x7f\xfa\x80\xe2\xb3\xe8\xf7\xff\x8f\x63\x14\x5f\x60\xfa\x74\xec\x71\xfc\x76\xd9\x2c\x17\xed\x7a\x13\x9f\x45\xf1\x75\x7d\xff\x7c\x71\x73\xb5\xb9\x5a\xb4\xcb\xcd\x7c\xfe\x75\xfd\x79\x3e\x6f\xea\xdb\xf6\x6c\xd5\xde\x3c\x5b\xdc\xd4\xcd\xf5\x7f\xaf\x8f\xa2\x77\xd1\x75\x7d\xbf\x35\x74\x7c\x14\xff\xfd\xce\x87\xff\xb7\xd6\xcc\x71\x59\x52\xec\x64\xd1\xd3\x9d\x8b\x32\x94\xbb\x59\xf2\xe4\xc9\x92\xbf\xfe\xfc\xb3\x72\x8c\x2b\x81\xb3\xee\x3d\xc7\x1f\xcf\x87\x93\xbc\xd5\xb9\x78\x4b\x2a\x4b\xd6\xdc\xad\xb2\x9d\x1b\x2e\x59\x52\x79\xc3\xcf\x11\x45\x53\xc2\x0c\x5c\xbe\x4d\xb2\x58\xaf\xda\xe5\xaa\x95\x5c\xed\x3f\x43\x2f\x7e\x0e\xdd\x35\xdd\x0f\x35\x75\xf7\x33\xfb\xde\xb7\x8a\x51\x9e\x64\x45\x89\xca\xbe\xdb\xe7\x97\xf8\x64\x27\x71\xbf\x9f\xfd\x92\x9e\xaa\x0c\x72\x89\x84\x20\x5c\xc0\x32\x88\x64\x1a\x70\x83\x48\xa6\x01\x35\x88\x64\x9a\xd2\x20\x53\x24\xb2\x8c\x91\x59\x5a\xc2\xf2\xc8\xc9\xe8\x3c\x22\x21\x06\xea\x11\x09\xa9\xd2\x23\xb3\x8a\x4d\x04\x46\x19\x06\x16\x47\x4e\x47\xe7\x11\x09\x31\x50\x8f\x48\x48\x95\x1e\xc9\x39\xcb\xfc\xb9\xe3\x78\x74\x69\x88\x21\x71\x00\x77\x18\x92\xaa\x9f\x32\x02\xcd\x38\xf7\x98\xa7\xee\x73\x11\xb0\xd2\x10\x43\x62\xa0\x06\xd1\x4d\x43\x18\x61\x46\xc5\xba\xc3\x4b\x80\x95\x81\x18\x12\x03\xb5\x87\x6e\x06\x52\xa0\xbc\x12\x88\xc0\x32\x08\xac\xf4\xc3\x90\x18\xa8\x41\x74\xd3\x8f\xcb\x94\x94\x38\x47\x33\x6c\xda\xf0\x6b\x96\x57\x9b\x2f\xf5\x37\xb5\x47\x03\x76\x3f\x9c\x43\x0e\x31\x82\x73\x38\x75\x70\x48\x52\x4e\x91\x49\x6d\x62\x97\xdb\x51\x3e\xe1\x1c\x12\x8e\xf2\xba\x59\x03\x2a\x4a\xc1\x29\x9f\x11\x64\x92\x5a\xda\x65\x77\x94\x2e\x38\x87\x84\xa3\xbe\x6e\x52\x30\x41\x62\xea\x54\xf6\x80\x55\xa6\x73\x48\x3f\xb2\xbb\xa8\x25\x73\x94\xa4\x84\x91\xc2\xa4\x61\x69\x97\x3c\x78\xc0\x0f\x50\x33\x3a\x87\xeb\xe9\x56\xb3\xc4\xa8\x0b\x69\x17\x3b\x78\xac\x0f\x50\x0d\x3a\x87\x53\xc7\x7a\x8a\x92\xcc\x30\xbf\xbf\x6b\x3a\xc7\xae\xdd\x3a\xc3\x47\x40\x1f\x0c\x31\x44\xbb\xc1\x8b\xab\xf3\xef\x2a\xcf\x39\x33\xda\x96\x7a\x60\x8e\xe2\xed\x60\x08\x7f\xd2\xe8\xc6\x4b\x81\xa7\x5e\x36\x8d\xa3\x80\x38\x18\xc2\x9f\x32\xfa\x01\xad\x32\xed\x57\xe8\x81\x39\xea\x52\x0d\x86\xf0\x27\x8d\x6e\x2f\x29\x41\xe2\x1c\xb3\xd2\x66\x9e\xf1\x72\x0c\xbd\x24\x7b\x90\x0e\xf2\x0c\x7b\x70\xfd\x79\x46\x91\x93\x32\x0d\x2e\xbe\xdf\xea\xc2\x1e\x24\x1c\xf1\xb5\xdb\x49\x22\xe7\x02\xc0\xb6\xf7\x5b\x5e\xd8\x83\x84\xa3\xbc\xf6\x2f\x5c\x38\x9d\xc2\xd8\xf5\x8e\x1e\xd7\xce\x21\xe1\x68\xaf\xfb\xb8\xa7\x18\x95\x29\x16\x97\x5c\x98\xfd\xc0\xc9\x2e\xbd\x64\x1a\x3c\xfd\x25\xd3\xe0\xe8\x2f\x99\xa6\x3e\x3a\xc4\xe8\x02\x80\xf0\xaf\xc6\x20\xbc\x04\x12\x8e\xf0\x12\x38\xf5\xe3\x9e\x26\x29\xce\xad\x36\x92\x0d\xc9\xb5\xde\x27\x09\xa5\x7d\xef\xcb\x20\x21\xb5\xef\x7d\x39\xa6\x5b\xe3\x55\x94\x30\x24\xac\x1e\x1c\x1a\xa2\xbf\x19\x83\xf8\x12\x48\x38\xe2\x4b\xe0\xd4\x27\x48\xc4\xac\x5b\xb9\x3f\x35\xbc\x93\x43\x7b\x90\x7e\x74\x77\x71\x72\x38\xe1\x25\xb2\x7b\x70\x68\x08\x1e\xbc\xb4\x87\x73\x70\x68\x0f\x4e\x29\xfd\x7b\x52\xa4\x00\xf6\x7c\xf0\xca\x1e\xce\xc1\xa1\x3d\x38\xa9\xf0\x87\x07\x0f\x3f\x02\x00\x00\xff\xff\x0d\x8c\x9e\xcf\x09\x3c\x00\x00")

func profileClassjobJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileClassjobJson,
		"profile/classjob.json",
	)
}

func profileClassjobJson() (*asset, error) {
	bytes, err := profileClassjobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/classjob.json", size: 15369, mode: os.FileMode(438), modTime: time.Unix(1608509213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileGearsetJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\xdc\x41\x6b\x1a\x41\x18\xc6\xf1\x7b\x20\xdf\x61\xd9\x53\x0b\x35\x54\x8d\x4d\xeb\x21\x30\xd1\xd1\x2c\x59\x57\x58\xb7\x94\x9c\xa4\xd5\x80\x82\xc4\xd0\xda\x5e\x4a\xbe\x7b\xd1\x5a\x1a\x41\x31\xcd\xbc\xcf\x33\x6f\xdf\x5b\x19\x72\xd8\xff\x6c\x69\x7e\x2c\xf4\xf9\x79\x7a\x92\x24\x49\x92\x0e\x5c\x56\x5c\xbb\xa2\x9b\xb6\x93\xed\xd1\xe6\xb8\x70\x03\xbf\x7b\xb4\x39\xfe\x76\xb7\xb8\x9b\xac\x96\x5f\xd3\x76\x92\x9e\xcd\x27\xcb\xfb\xda\xa4\x56\x7b\x9b\x5c\x26\x67\xd3\x2f\xb5\xd5\x72\xb9\x58\xcd\x1f\x92\xcb\x64\x3a\xff\xd1\xbe\x5f\xcd\x6a\x93\xd9\x7c\x31\x7d\x55\x7f\x2d\x77\xd4\x58\x1f\xcd\x1a\x3b\x27\xe9\xdf\x87\x7c\x7c\xf3\xa4\xa1\x7b\x35\xce\xb3\xe2\x86\x9b\xb1\x79\xc0\xcf\x3b\x3f\x73\xe8\xf9\x06\x59\xe9\xfa\x7e\xac\xfa\xaa\x77\x8f\x9a\xeb\xa3\x87\x67\x5d\xfe\x36\x2e\xca\x3b\x90\xec\x7b\xf6\xdb\x1c\x55\x2e\x2b\x34\x76\xee\x3d\x3a\xf8\xda\x5c\xe5\xcb\xcc\x8d\xeb\xdc\x92\xd6\xfa\xe8\xfb\xe2\xc9\xc9\xc5\xfa\x64\x31\x3f\xf6\x0a\x8f\x75\x34\xf4\x75\xec\xf9\x7b\x77\xbc\xa3\xa9\xaf\xa3\xf9\x92\x8e\x73\x7d\x1d\xe7\x2f\xe9\x68\xe9\xeb\x68\xfd\x4b\x47\xa7\xf4\xae\x1a\x96\x11\x7e\xf9\x5c\x1c\xf8\xa9\xc3\xff\xca\xfe\xfe\xe3\x9f\xc7\x4f\x87\xbd\x5e\x20\x58\xea\x36\xc0\x22\x93\x81\x05\x0b\xfd\xaa\xc9\x60\xd1\xd7\x87\x01\x0b\xb3\x13\x0b\x16\x99\x92\xf8\x60\xe1\x75\x60\xc1\xc2\xeb\xc0\x82\x85\xd7\x81\x05\x0b\xaf\x03\x0e\x16\x99\x94\x60\xb0\x5c\x7b\x17\xa2\x95\x86\x0d\xad\xc8\x64\x60\xb5\x42\xbf\x6a\xb2\x56\xf4\xf5\x61\xb4\xc2\xec\xc4\x6a\x45\xa6\x24\xbe\x56\x78\x1d\x58\xad\xf0\x3a\xb0\x5a\xe1\x75\x60\xb5\xc2\xeb\x80\x6b\x45\x26\x25\x58\x2b\x57\xc3\xee\x6d\x80\x56\x9a\x36\xb4\x22\x93\x81\xd5\x0a\xfd\xaa\xc9\x5a\xd1\xd7\x87\xd1\x0a\xb3\x13\xab\x15\x99\x92\xf8\x5a\xe1\x75\x60\xb5\xc2\xeb\xc0\x6a\x85\xd7\x81\xd5\x0a\xaf\x03\xae\x15\x99\x94\xf0\x6f\x2b\xae\xe8\x8e\x02\xb8\x72\x6e\x83\x2b\x32\x19\x58\xae\xd0\xaf\x9a\xcc\x15\x7d\x7d\x18\xae\x30\x3b\xb1\x5c\x91\x29\x89\xcf\x15\x5e\x07\x96\x2b\xbc\x0e\x2c\x57\x78\x1d\x58\xae\xf0\x3a\xe0\x5c\x91\x49\x09\xe6\xca\x27\x97\x8d\xaa\x00\xae\xb4\x6c\x70\x45\x26\x03\xcb\x15\xfa\x55\x93\xb9\xa2\xaf\x0f\xc3\x15\x66\x27\x96\x2b\x32\x25\xf1\xb9\xc2\xeb\xc0\x72\x85\xd7\x81\xe5\x0a\xaf\x03\xcb\x15\x5e\x07\x9c\x2b\x32\x29\xc1\x5c\xc9\x7d\x3f\xe4\xe3\xca\x3b\x1b\x5a\x91\xc9\xc0\x6a\x85\x7e\xd5\x64\xad\xe8\xeb\xc3\x68\x85\xd9\x89\xd5\x8a\x4c\x49\x7c\xad\xf0\x3a\xb0\x5a\xe1\x75\x60\xb5\xc2\xeb\xc0\x6a\x85\xd7\x01\xd7\x8a\x4c\x4a\xb0\x56\x7a\xde\x87\x7c\x5b\xb9\xb0\xa1\x15\x99\x0c\xac\x56\xe8\x57\x4d\xd6\x8a\xbe\x3e\x8c\x56\x98\x9d\x58\xad\xc8\x94\xc4\xd7\x0a\xaf\x03\xab\x15\x5e\x07\x56\x2b\xbc\x0e\xac\x56\x78\x1d\x70\xad\xc8\xa4\x04\x6b\xc5\xbb\xb2\xcc\x8a\xa0\xef\x2b\xef\x6d\x88\x45\x26\x03\x2b\x16\xfa\x55\x93\xc5\xa2\xaf\x0f\x23\x16\x66\x27\x56\x2c\x32\x25\xf1\xc5\xc2\xeb\xc0\x8a\x85\xd7\x81\x15\x0b\xaf\x03\x2b\x16\x5e\x07\x5c\x2c\x32\x29\xc1\x62\x29\x7c\xe7\x26\x77\x1d\x1f\x20\x96\x0f\x36\xc4\x22\x93\x81\x15\x0b\xfd\xaa\xc9\x62\xd1\xd7\x87\x11\x0b\xb3\x13\x2b\x16\x99\x92\xf8\x62\xe1\x75\x60\xc5\xc2\xeb\xc0\x8a\x85\xd7\x81\x15\x0b\xaf\x03\x2e\x16\x99\x94\xf0\xff\xcb\x5c\xba\x8e\xcf\x7d\x15\xf2\x91\xa5\x6e\x64\xde\x56\xa8\x03\x3c\x17\xa7\x6f\x00\x56\x78\x2f\x4e\x5f\x20\x68\x30\xce\xce\xc4\xad\x50\x4a\x7c\xb8\x10\x43\xc0\x9b\x71\x56\x56\x6e\x89\x21\xe0\xd5\x38\x43\x3b\xb7\x42\x2d\xc1\x7a\x29\xb3\xa2\x5f\x0f\x91\x8b\x95\x9d\xdb\xff\x62\xe8\x56\xdf\x12\xac\xb0\x5c\xf4\x05\x82\xe4\x62\x68\xeb\xd6\xcc\xd8\xad\x99\xb5\x5b\x33\x73\xb7\x66\xf6\x6e\x2d\x0d\xde\x2a\x59\xbc\x5d\xcb\xa5\x11\x22\x17\x23\x9b\xb7\x42\x1d\x60\xb9\xe8\x5b\x85\x15\x96\x8b\xbe\x40\x90\x5c\xec\xec\xde\x0a\xa5\x28\x90\x8b\x95\xe5\x5b\x62\x08\x58\x2e\x56\xb6\x6f\x89\x21\x78\xb9\x28\x59\xbf\x1d\x0d\x3f\xe6\x9d\xf2\x76\x54\xb9\x3c\xc4\x2f\xcd\xfd\xbf\x04\xe2\x21\x66\x9b\x79\x7a\xf2\xf8\x2b\x00\x00\xff\xff\x59\x89\xa9\x51\xf9\x71\x00\x00")

func profileGearsetJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileGearsetJson,
		"profile/gearset.json",
	)
}

func profileGearsetJson() (*asset, error) {
	bytes, err := profileGearsetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/gearset.json", size: 29177, mode: os.FileMode(438), modTime: time.Unix(1608509133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileMinionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x50\x50\xf2\xf1\x0c\x0e\x51\xb2\x52\x80\x72\xc1\x42\xc5\xa9\x39\xa9\xc9\x25\xf9\x45\x4a\x56\x0a\x4a\x7a\xb9\x99\x79\x99\xf9\x79\xf1\xf1\x39\x99\xc5\x25\x4a\x10\x45\xb5\x3a\x50\xbd\x7e\x8e\xbe\xae\xc4\xe8\xcd\x4b\xcc\x4d\x85\xe9\xe5\xe5\xaa\x05\x04\x00\x00\xff\xff\x06\x70\x28\x65\x7b\x00\x00\x00")

func profileMinionJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileMinionJson,
		"profile/minion.json",
	)
}

func profileMinionJson() (*asset, error) {
	bytes, err := profileMinionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/minion.json", size: 123, mode: os.FileMode(438), modTime: time.Unix(1608509295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profileMountJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x50\x50\xf2\xf1\x0c\x0e\x51\xb2\x52\x80\x72\xc1\x42\xc5\xa9\x39\xa9\xc9\x25\xf9\x45\x4a\x56\x0a\x4a\x7a\xb9\xf9\xa5\x79\x25\xf1\xf1\x39\x99\xc5\x25\x4a\x10\x35\xb5\x3a\x50\xad\x7e\x8e\xbe\xae\x44\x68\xcd\x4b\xcc\x4d\x85\x69\xe5\xe5\xaa\x05\x04\x00\x00\xff\xff\x23\x52\xb5\x13\x79\x00\x00\x00")

func profileMountJsonBytes() ([]byte, error) {
	return bindataRead(
		_profileMountJson,
		"profile/mount.json",
	)
}

func profileMountJson() (*asset, error) {
	bytes, err := profileMountJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profile/mount.json", size: 121, mode: os.FileMode(438), modTime: time.Unix(1608509312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchCharacterJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xf1\x4b\xc2\x40\x14\xc7\x7f\x17\xfc\x1f\x1e\xfb\x49\xc3\x36\x82\x20\x90\x58\x5c\xba\x6a\xa4\x2b\xb6\x4b\x0a\x84\xc7\xda\x9d\x7a\x75\xde\xc9\xed\xca\x22\xfc\xdf\xc3\x95\x34\x27\x8a\xd2\xaf\x5f\xde\xfb\xbc\xcf\x3d\xde\x7d\xd5\x6b\x00\x00\x4e\x10\xd1\x38\x0c\x12\xa7\x0d\xbf\x49\x91\xe6\x5c\xf2\xcc\x6a\xe3\xb4\xc1\x71\x25\xcb\x2d\xe2\x5c\x28\xa6\xe7\xe0\x03\x13\xef\x2e\x57\xd6\x7c\x3a\x3f\x0d\x8b\x56\x09\xf5\x54\x01\x91\x01\xa1\x24\x5e\x0f\x37\x27\x14\x38\xc4\x6c\x92\x9a\x14\x71\x94\x66\x1c\x7c\x10\xd3\xb1\xf3\xd7\xb4\x9a\x52\x34\x5f\x05\x24\xa1\xd8\x27\xb4\x73\x53\x55\x3f\x58\x7f\x03\x1e\x76\xf7\xd4\x95\x42\xbd\x3a\xad\x4a\xa1\xe1\x63\xfe\xb1\xac\xf2\xa4\x66\x3c\xb7\x5a\x71\xaf\x78\x57\x66\xb9\xf1\x1a\x17\xf7\xe7\x61\xd7\x1f\x0e\xd9\x51\xd3\xdb\x26\xd0\x23\xd1\xf5\x61\x1b\x93\xa9\xda\xba\xab\x88\xf4\x83\x3d\x69\x2a\x9d\xf2\x6d\x98\x98\x44\xb7\x07\x49\x09\x35\xd2\xe0\x83\xfb\x92\x23\x5a\xad\xa5\x15\xb3\x5d\x6c\x0c\x3b\x77\xd1\x7f\x07\xec\xbe\x9a\x24\x88\x07\xc1\xbe\xb7\x38\xd7\x46\xb2\x32\xa9\x72\xec\xbd\x30\xa1\x18\x05\x8f\x14\x2f\x1f\x28\xad\xaa\xaf\x21\xdf\xa4\xfb\x6c\x15\xe2\x2c\x1d\x73\xd3\x56\x76\x72\x9c\x4d\x84\x64\x8d\xb3\x26\xf8\x20\x45\x29\x39\x5d\x26\x69\x29\x38\x69\xae\x3e\x59\xbd\xb6\xf8\x0e\x00\x00\xff\xff\x1d\x10\x39\x1c\xb3\x03\x00\x00")

func searchCharacterJsonBytes() ([]byte, error) {
	return bindataRead(
		_searchCharacterJson,
		"search/character.json",
	)
}

func searchCharacterJson() (*asset, error) {
	bytes, err := searchCharacterJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search/character.json", size: 947, mode: os.FileMode(438), modTime: time.Unix(1608536127, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.json":                 metaJson,
	"profile/achievements.json": profileAchievementsJson,
	"profile/attributes.json":   profileAttributesJson,
	"profile/character.json":    profileCharacterJson,
	"profile/classjob.json":     profileClassjobJson,
	"profile/gearset.json":      profileGearsetJson,
	"profile/minion.json":       profileMinionJson,
	"profile/mount.json":        profileMountJson,
	"search/character.json":     searchCharacterJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.json": &bintree{metaJson, map[string]*bintree{}},
	"profile": &bintree{nil, map[string]*bintree{
		"achievements.json": &bintree{profileAchievementsJson, map[string]*bintree{}},
		"attributes.json":   &bintree{profileAttributesJson, map[string]*bintree{}},
		"character.json":    &bintree{profileCharacterJson, map[string]*bintree{}},
		"classjob.json":     &bintree{profileClassjobJson, map[string]*bintree{}},
		"gearset.json":      &bintree{profileGearsetJson, map[string]*bintree{}},
		"minion.json":       &bintree{profileMinionJson, map[string]*bintree{}},
		"mount.json":        &bintree{profileMountJson, map[string]*bintree{}},
	}},
	"search": &bintree{nil, map[string]*bintree{
		"character.json": &bintree{searchCharacterJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
